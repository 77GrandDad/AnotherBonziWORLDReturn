var admin = false;
var espeaktts = false;
var sapi5tts = false;
("use strict");

function updateAds() {
    var a = $(window).height() - $(adElement).height(),
        b = a <= 250;
    b && (a = $(window).height()), $(adElement)[b ? "hide" : "show"](), $("#content").height(a);
}
// OBSOLETE: No longer needed
//function execute() {
   // $("#evaljs_console").append("\n> " + $("#evaljs_codebox").val()), socket.emit("evaljs", { input: $("#evaljs_codebox").val() });
//}
function dragMoveListener(t) {
    var e = t.target,
        a = (parseFloat(e.getAttribute("data-x")) || 0) + t.dx,
        r = (parseFloat(e.getAttribute("data-y")) || 0) + t.dy;
    (e.style.webkitTransform = e.style.transform = "translate(" + a + "px, " + r + "px)"), e.setAttribute("data-x", a), e.setAttribute("data-y", r);
}
// Unneeded
//interact(".win2000_base").draggable({ onmove: window.dragMoveListener }), (window.dragMoveListener = dragMoveListener);
function close_evaljs() {
    $("#evaljs").css("display", "none");
}
function _classCallCheck(a, b) {
    if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
}
function range(a, b) {
    for (var c = [], d = a; d <= b; d++) c.push(d);
    for (var d = a; d >= b; d--) c.push(d);
    return c;
}
function replaceAll(a, b, c) {
    return a.replace(new RegExp(b, "g"), c);
}
function s4() {
    return Math.floor(65536 * (1 + Math.random()))
        .toString(16)
        .substring(1);
}
function youtubeParser(a) {
    var b = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/,
        c = a.match(b);
    return !(!c || 11 != c[7].length) && c[7];
}
function rtimeOut(a, b) {
    var c,
        d = Date.now,
        e = window.requestAnimationFrame,
        f = d(),
        g = function () {
            d() - f < b ? c || e(g) : a();
        };
    return (
        e(g),
        {
            clear: function () {
                c = 1;
            },
        }
    );
}
function rInterval(a, b) {
    var c,
        d = Date.now,
        e = window.requestAnimationFrame,
        f = d(),
        g = function () {
            d() - f < b || ((f += b), a()), c || e(g);
        };
    return (
        e(g),
        {
            clear: function () {
                c = 1;
            },
        }
    );
}
function linkify(a) {
    var b = /(https?:\/\/([-\w\.]+)+(:\d+)?(\/([\w\/_\.]*(\?\S+)?)?)?)/gi;
    return a.replace(b, "<a href='$1' target='_blank'>$1</a>").replace(/r\/(\w+)/g, "<a href='https://reddit.com/r/$1' target='_blank'>r/$1</a>");
}
function loadBonzis(a) {
    loadQueue.loadManifest([
		{id: "bonziBlack", src:"./img/bonzi/black.png"},
		{id: "bonziBlue", src:"./img/bonzi/blue.png"},
		{id: "bonziBrown", src:"./img/bonzi/brown.png"},
		{id: "bonziGreen", src:"./img/bonzi/green.png"},
		{id: "bonziPurple", src:"./img/bonzi/purple.png"},
		{id: "bonziRed", src:"./img/bonzi/red.png"},
		{id: "gd", src:"./img/bonzi/gd.png"},
		{id: "bonziYellow", src:"./img/bonzi/yellow.png"},
		{id: "clippy", src:"./img/bonzi/clippy.png"},
		{id: "peedy", src:"./img/bonzi/peedy.png"},
		{id: "merlin", src:"./img/bonzi/merlin.png"},
		{id: "packetman", src:"./img/bonzi/packetman.png"},
		{id: "rover", src:"./img/bonzi/rover.png"},
		{id: "bonziOrange", src:"./img/bonzi/orange.png"},
		{id: "bonziWhite", src:"./img/bonzi/white.png"},
		{id: "bonziGray", src:"./img/bonzi/gray.png"},
		{id: "vargskelethor", src:"./img/bonzi/vargskelethor.png"},
		{id: "ghost", src:"./img/bonzi/ghost.png"},
		{id: "robby", src:"./img/bonzi/robby.png"},
		{id: "pope", src:"./img/bonzi/pope.png"},
		{id: "seamus", src:"./img/bonzi/seamus.png"},
		{id: "topjej", src:"./img/misc/topjej.png"}
    ]),
        loadQueue.on(
            "fileload",
            function (a) {
                loadDone.push(a.item.id);
            },
            this
        ),
        a && loadQueue.on("complete", a, this);
}
function loadTest() {
    $("#login_card").hide(),
        $("#login_error").hide(),
        $("#login_load").show(),
        (document.getElementById("page_login").style.cursor = "wait"),
        (window.loadTestInterval = rInterval(function () {
            try {
                if (!loadDone.equals(loadNeeded)) throw "Not done loading.";
                login(), loadTestInterval.clear();
            } catch (a) {}
        }, 100));
}
function login() {
    meSpeak.loadVoice("voices/en.json");
    p.play();
    socket.emit("login", { name: $("#login_name").val() || 'Anonymous', room: $("#login_room").val() || 'default' }), setup();
}
function errorJS() {
    ("none" != $("#page_ban").css("display") && "none" != $("#page_kick").css("display")) || $("#page_jserror").show();
}
function errorFatal(p) {
  p.play(), ("none" != $("#page_ban").css("display") && "none" != $("#page_kick").css("display")) || $("#page_error").show();
}
function setup() {
    $("#chat_send").click(sendInput),
        $("#chat_message").keypress(function (a) {
            13 == a.which && sendInput();
        }),
        socket.on("room", function (a, p) {
            if (a.room == "secret") {
                document.getElementById("secret").innerHTML = '<iframe style="position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;" src="https://www.youtube.com/embed/p3B8bMc2kso?autoplay=1&showinfo=0&controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'
            }
            p.play();
            (document.getElementById("content").style.backgroundColor = a.background),
                $("#room_owner")[a.isOwner ? "show" : "hide"](),
                $("#room_public")[a.isPublic ? "show" : "hide"](),
                $("#room_private")[a.isPublic ? "hide" : "show"](),
                $("#room_id").text(a.room);
        }),
        socket.on("updateAll", function (a) {
            $("#page_login").hide(), (usersPublic = a.usersPublic), usersUpdate(), BonziHandler.bonzisCheck();
        }),
        socket.on("update", function (a) {
            (window.usersPublic[a.guid] = a.userPublic), usersUpdate(), BonziHandler.bonzisCheck();
        }),
        socket.on("background", function (a) {
            document.getElementById("content").style.backgroundColor = a.background;
        }),
        socket.on("updateAll", function (a) {
            $("#page_login").hide(), (usersPublic = a.usersPublic), usersUpdate(), BonziHandler.bonzisCheck();
        }),
        socket.on("update", function (a) {
            (window.usersPublic[a.guid] = a.userPublic), usersUpdate(), BonziHandler.bonzisCheck();
        }),
        socket.on("talk", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.runSingleEvent([{ type: "text", text: a.text, say: a.say || a.text }]);
        }),
        socket.on("joke", function (a) {
            var b = bonzis[a.guid];
            (b.rng = new Math.seedrandom(a.rng)), b.cancel(), b.joke();
        }),
        socket.on("youtube", function (a) {
            var b = bonzis[a.guid];
            b.youtube(a.vid);
        }),
        socket.on("video", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.video(a.vid);
        }),
        socket.on("img", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.img(a.vid);
        }),
		        socket.on("winflash", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.winflash(a.vid);
	    )),
        socket.on("fact", function (a) {
            var b = bonzis[a.guid];
            (b.rng = new Math.seedrandom(a.rng)), b.cancel(), b.fact();
        }),
        socket.on("backflip", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.backflip(a.swag);
			
        }),
        socket.on("shrug", function (a) {
            var b = bonzis[a.guid];
            b.shrug();
        }),
        socket.on("greet", function (a) {rf
            var b = bonzis[a.guid];
            b.greet();
        }),
        socket.on("swag", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.swag();
        }),
        socket.on("earth", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.earth();
        }),
        socket.on("grin", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.grin();
        }),
        socket.on("surfjoin", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.surfjoin();
        }),
        socket.on("surfleave", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.surfleave();
        }),
        socket.on("asshole", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.asshole(a.target);
        }),
        socket.on("kiddie", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.kiddie(a.target);
        }),
        socket.on("welcome", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.welcome(a.target);
        }),
        socket.on("muted", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.muted(a.target);
        }),
        socket.on("triggered", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.runSingleEvent(b.data.event_list_triggered);
        }),
        socket.on("linux", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.runSingleEvent(b.data.event_list_linux);
        }),
        socket.on("pawn", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.runSingleEvent(b.data.event_list_pawn);
        }),
        socket.on("kiddie", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.kiddie();
        }),
        socket.on("bootleg", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.bootleg();
        }),
        socket.on("list", function (a) {
            $("#evaljs").css("display", "block"), (document.getElementById("evaljs_console").innerHTML = a.vid + "<br><br>");
        }),
        socket.on("open_ban_menu", function (a) {
            banmenu();
        }),
        socket.on("vaporwave", function (a) {
            $("body").addClass("vaporwave");
        }),
        socket.on("unvaporwave", function (a) {
            $("body").removeClass("vaporwave");
        }),
        socket.on("leave", function (a) {
            var b = bonzis[a.guid];
            setTimeout(function () {
                if (b.color == "peedy") {
                } else if (b.color == "merlin") {
                } else if (b.color == "packetman") {
                } else if (b.color == "gd") {
                } else if (b.color == "robby") {
                } else if (b.color == "clippy") {
                } else if (b.color == "unbojih") {
                } else if (b.color == "rover") {
                } else if (b.color == "ghost") {
                } else if (b.color == "vargskelethor") {
                }
            }, 600);
            "undefined" != typeof b &&
                b.exit(
                    function (a) {
                        this.deconstruct(), delete bonzis[a.guid], delete usersPublic[a.guid], usersUpdate();
                    }.bind(b, a)
                );
        });
}
function usersUpdate() {
    (usersKeys = Object.keys(usersPublic)), (usersAmt = usersKeys.length);
}
function sendInput() {
    var a = $("#chat_message").val();
    if (($("#chat_message").val(""), a.length > 0)) {
        var b = youtubeParser(a);
        if (b) return void socket.emit("command", { list: ["youtube", b] });
        if ("/" == a.substring(1, 0)) {
            var c = a.substring(1).split(" ");
            socket.emit("command", { list: c });
        } else socket.emit("talk", { text: a });
    }
}
function touchHandler(a) {
    var b = a.changedTouches,
        c = b[0],
        d = "";
    switch (a.type) {
        case "touchstart":
            d = "mousedown";
            break;
        case "touchmove":
            d = "mousemove";
            break;
        case "touchend":
            d = "mouseup";
            break;
        default:
            return;
    }
    var e = document.createEvent("MouseEvent");
    e.initMouseEvent(d, !0, !0, window, 1, c.screenX, c.screenY, c.clientX, c.clientY, !1, !1, !1, !1, 0, null), c.target.dispatchEvent(e);
}
var adElement = "#ap_iframe";
$(function () {
    $(window).load(updateAds), $(window).resize(updateAds), $("body").on("DOMNodeInserted", adElement, updateAds), $("body").on("DOMNodeRemoved", adElement, updateAds);
});
var _createClass = (function () {
        function a(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                (d.enumerable = d.enumerable || !1), (d.configurable = !0), "value" in d && (d.writable = !0), Object.defineProperty(a, d.key, d);
            }
        }
        return function (b, c, d) {
            return c && a(b.prototype, c), d && a(b, d), b;
        };
    })(),
    Bonzi = (function () {
        function a(b, c) {
            this.stopSpeaking();
            var d = this;
            _classCallCheck(this, a),
                (this.userPublic = c || { name: "BonziBUDDY", color: "purple", speed: 175, pitch: 50, amplitude: 100, voice: "m1" }),
                (this.color = this.userPublic.color),
                this.colorPrev,
                (this.data = window.BonziData),
                (this.drag = !1),
                (this.dragged = !1),
                (this.eventQueue = []),
                (this.eventRun = !0),
				(this.msg = null),
                (this.event = null),
                (this.willCancel = !1),
                (this.run = !0),
                (this.mute = !1),
                (this.eventTypeToFunc = { anim: "updateAnim", html: "updateText", text: "updateText", idle: "updateIdle", add_random: "updateRandom" }),
                "undefined" == typeof b ? (this.id = s4() + s4()) : (this.id = b),
                (this.rng = new Math.seedrandom(this.seed || this.id || Math.random())),
                (this.selContainer = "#content"),
                (this.$container = $(this.selContainer)),
                this.$container.append(
                    "\n\t\t\t<div id='bonzi_" +
                        this.id +
                        "' class='bonzi'>\n\t\t\t\t<div class='bonzi_name'></div>\n\t\t\t\t\t<div class='bonzi_placeholder'></div>\n\t\t\t\t<div style='display:none' class='bubble'>\n\t\t\t\t\t<p class='bubble-content'></p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t"
                ),
                (this.selElement = "#bonzi_" + this.id),
                (this.selDialog = this.selElement + " > .bubble"),
                (this.selDialogCont = this.selElement + " > .bubble > p"),
                (this.selNametag = this.selElement + " > .bonzi_name"),
                (this.selCanvas = this.selElement + " > .bonzi_placeholder"),
                $(this.selCanvas).width(this.data.size.x).height(this.data.size.y),
                (this.$element = $(this.selElement)),
                (this.$canvas = $(this.selCanvas)),
                (this.$dialog = $(this.selDialog)),
                (this.$dialogCont = $(this.selDialogCont)),
                (this.$nametag = $(this.selNametag)),
                this.updateName(),
                $.data(this.$element[0], "parent", this),
                this.updateSprite(!0),
                (this.generate_event = function (a, b, c) {
                    this.stopSpeaking();
                    var d = this;
                    a[b](function (a) {
                        d[c](a);
                    });
                }),
                this.generate_event(this.$canvas, "mousedown", "mousedown"),
                this.generate_event($(window), "mousemove", "mousemove"),
                this.generate_event($(window), "mouseup", "mouseup");
            var e = this.maxCoords();
            (this.x = e.x * this.rng()),
                (this.y = e.y * this.rng()),
                this.move(),
                $.contextMenu({
                    selector: this.selCanvas,
                    build: function (a, b) {
                        return {
                            items: {
                                cancel: {
                                    name: "Cancel",
                                    callback: function () {
                                        d.cancel();
                                    },
                                },
								"mute": {
									name: function name() {
										return d.mute ? "Unmute" : "Mute";
									},
									callback: function callback() {
										d.cancel();
										d.mute = !_this2.mute;
									}
								},
                                asshole: {
                                    name: "Call an Asshole",
                                    callback: function () {
                                        socket.emit("command", { list: ["asshole", d.userPublic.name] });

                                    },
                                },
                                hi: {
                                    name: "Say Hello",
                                    callback: function () {
                                        socket.emit("command", { list: ["welcome", d.userPublic.name] });
                                    },
                                }
                            },
                        };
                    },
                    animation: { duration: 175, show: "fadeIn", hide: "fadeOut" },
                }),
                (this.needsUpdate = !1),
                this.runSingleEvent([{ type: "anim", anim: "surf_intro" }]),
                setTimeout(function () {
                    if (d.color == "peedy") {

                    }
                }, 100),
                setTimeout(function () {
                    if (d.color == "vargskelethor") {

                    } 
                    if (d.color == "gd") {

                    }
                    if (d.color == "ghost") {

                    }
                }, 1),
                setTimeout(function () {
                    if (d.color === "clippy") {

                    } else if (d.color === "rover") {

                    } else if (d.color === "unbojih") {
                     
                    } else if (d.color === "merlin") {
                     
                    } else if (d.color == "packetman") {
                        setTimeout(function () {
                        }, 500);
						
                    } else if (d.color === "robby") {
                       
   
                    }
                }, 800),
                setTimeout(function () {
                    if (d.color != "clippy" && d.color != "unbojih" && d.color != "gd" && d.color != "packetman" && d.color != "merlin" && d.color != "robby" && d.color != "rover" && d.color != "ghost" && d.color != "peedy" && d.color != "vargskelethor") {
                        if (d.color == "seamus") {
                        } else {
                        }
                    }
                }, 3000);
        }
        return (
            _createClass(a, [
                {
                    key: "eventMake",
                    value: function (a) {
                        return {
                            list: a,
                            index: 0,
                            timer: 0,
                            cur: function () {
                                return this.list[this.index];
                            },
                        };
                    },
                },
                {
                    key: "mousedown",
                    value: function (a, anim) {
                        1 == a.which && ((this.drag = !0), (this.dragged = !1), (this.drag_start = { x: a.pageX - this.x, y: a.pageY - this.y }));
                    },
                },
                {
                    key: "mousemove",
                    value: function (a) {
                        this.drag && (this.move(a.pageX - this.drag_start.x, a.pageY - this.drag_start.y), (this.dragged = !0));
                    },
                },
                {
                    key: "move",
                    value: function (a, b) {
                        0 !== arguments.length && ((this.x = a), (this.y = b));
                        var c = this.maxCoords();
                        (this.x = Math.min(Math.max(0, this.x), c.x)),
                            (this.y = Math.min(Math.max(0, this.y), c.y)),
                            this.$element.css({ marginLeft: this.x, marginTop: this.y }),
                            (this.sprite.x = this.x),
                            (this.sprite.y = this.y),
                            (BonziHandler.needsUpdate = !0),
                            this.updateDialog();
                    },
                },
                {
                    key: "mouseup",
                    value: function (a, anim) {
                        !this.dragged && this.drag && this.cancel(), (this.drag = !1), (this.dragged = !1);
                    },
                },
                {
                    key: "runSingleEvent",
                    value: function (a) {
                        this.mute || this.eventQueue.push(this.eventMake(a));
                    },
                },
                {
                    key: "clearDialog",
                    value: function () {
                        this.$dialogCont.html(""), this.$dialog.hide();
                    },
                },
                {
                    key: "cancel",
                    value: function () {
                        this.clearDialog(), this.stopSpeaking(), (this.eventQueue = [this.eventMake([{ type: "idle" }])]);
                    },
                },
                {
                    key: "retry",
                    value: function () {
                        this.clearDialog(), (this.event.timer = 0);
                    },
                },
                {
                    key: "stopSpeaking",
                    value: function () {
                        this.goingToSpeak = false;
                        try {
							if (sapi5tts === true) {
								window.speechSynthesis.cancel(this.msg);	 
							}
                            this.voiceSource.stop();
                        } catch (e) {}
                    },
                },
                {
                    key: "cancelQueue",
                    value: function () {
                        this.willCancel = !0;
                    },
                },
                {
                    key: "updateAnim",
                    value: function () {
                        0 === this.event.timer && this.sprite.gotoAndPlay(this.event.cur().anim), this.event.timer++, (BonziHandler.needsUpdate = !0), this.event.timer >= this.event.cur().ticks && this.eventNext();
                    },
                },
                {
                    key: "updateText",
                    value: function () {
                        0 === this.event.timer && (this.$dialog.css("display", "block"), (this.event.timer = 1), this.talk(this.event.cur().text, this.event.cur().say, !0)), "none" == this.$dialog.css("display") && this.eventNext();
                    },
                },
                {
                    key: "updateIdle",
                    value: function () {
                        var a = "idle" == this.sprite.currentAnimation && 0 === this.event.timer;
                        (a = a || this.data.pass_idle.indexOf(this.sprite.currentAnimation) != -1),
                            a
                                ? this.eventNext()
                                : (0 === this.event.timer && ((this.tmp_idle_start = this.data.to_idle[this.sprite.currentAnimation]), this.sprite.gotoAndPlay(this.tmp_idle_start), (this.event.timer = 1)),
                                  this.tmp_idle_start != this.sprite.currentAnimation && "idle" == this.sprite.currentAnimation && this.eventNext(),
                                  (BonziHandler.needsUpdate = !0));
                    },
                },
                {
                    key: "updateRandom",
                    value: function () {
                        var a = this.event.cur().add,
                            b = Math.floor(a.length * this.rng()),
                            c = this.eventMake(a[b]);
                        this.eventNext(), this.eventQueue.unshift(c);
                    },
                },
                {
                    key: "update",
                    value: function () {
                        if (this.run) {
                            if (
                                (0 !== this.eventQueue.length && this.eventQueue[0].index >= this.eventQueue[0].list.length && this.eventQueue.splice(0, 1), (this.event = this.eventQueue[0]), 0 !== this.eventQueue.length && this.eventRun)
                            ) {
                                var a = this.event.cur().type;
                                try {
                                    this[this.eventTypeToFunc[a]]();
                                } catch (b) {
                                    this.event.index++;
                                }
                            }
                            this.willCancel && (this.cancel(), (this.willCancel = !1)), this.needsUpdate && (this.stage.update(), (this.needsUpdate = !1));
                        }
                    },
                },
                {
                    key: "eventNext",
                    value: function () {
                        (this.event.timer = 0), (this.event.index += 1);
                    },
                },
                {
                    key: "talk",
                    value: function (a, b, c) {
                        hostname = window.location.hostname;
                        this.stopSpeaking();
                        var d = this;
                        (c = c || !1),
                            (a = replaceAll(a, "{NAME}", this.userPublic.name)),
                            (a = replaceAll(a, "{COLOR}", this.color)),
                            "undefined" != typeof b ? ((b = replaceAll(b, "{NAME}", this.userPublic.name)), (b = replaceAll(b, "{COLOR}", this.color))) : (b = a.replace("&gt;", "")),
                            (a = linkify(a));
                        var e = "&gt;" == a.substring(0, 4) || ">" == a[0];
                        this.$dialogCont[c ? "html" : "text"](a)[e ? "addClass" : "removeClass"]("bubble_greentext").removeClass("bubble_autowidth").css("display", "block");
               
                        this.$dialog.removeClass('bubble_autowidth');
						d.goingToSpeak = true;
						
						var voiceSelect = document.getElementById('voice');
						var supportMsg = document.getElementById('msg');

						if ('speechSynthesis' in window) {
							supportMsg.innerHTML = 'Your computer <strong><big>supports</big></strong> speech synthesis.';
						} else {
							supportMsg.innerHTML = 'Sorry your computer <strong>does not support</strong> speech synthesis.';
							supportMsg.classList.add('not-supported');
						}
                        var text = b.toLowerCase();
						if (espeaktts === true) { 
							if (sapi5tts === true) { 
							  // Create a new instance of SpeechSynthesisUtterance.
								this.msg = new SpeechSynthesisUtterance();
							  
							  // Set the text.
								this.msg.text = text;
							  
							  // If a voice has been selected, find the voice and set the
							  // utterance instance's voice attribute.
								if (voiceSelect.value) {
									this.msg.voice = speechSynthesis.getVoices().filter(function(voice) { return voice.name == voiceSelect.value; })[0];
								}
							  
							  // Queue this utterance.
								window.speechSynthesis.speak(this.msg);
								this.msg.onend = function(){
									d.clearDialog();
								}
							} else {
								speak.play(b, {
									"pitch": this.userPublic.pitch,
									"speed": this.userPublic.speed
								}, function () {
									// onended
									d.clearDialog();
								}, function (source) {
									if (!d.goingToSpeak) source.stop();
									d.voiceSource = source;
								});
							}
						} else {
								
							if (this.userPublic.color == "gd")
							{

							} else if (this.userPublic.color == "rover") {
							
							} else if (this.userPublic.color == "packetman") {
							
							} else if (this.userPublic.color == "ghost") {
								
							} else if (this.userPublic.color == "clippy") {

							} else if (this.userPublic.color == "peedy") {
							
							} else if (this.userPublic.color == "unbojih") {
								
							} else if (this.userPublic.color == "vargskelethor") {
								
							} else if (this.userPublic.color == "merlin") {
							
							} else if (this.userPublic.color == "robby") {

							} else if (this.userPublic.color == "pope") {
						
							} else {

								};
							}
						}
                    },
                },
                {
                    key: "joke",
                    value: function () {
                        this.runSingleEvent(this.data.event_list_joke);
                    },
                },
                {
                    key: "fact",
                    value: function () {
                        this.runSingleEvent(this.data.event_list_fact);
                    },
                },
                {
                    key: "exit",
                    value: function (a) {
                        if (this.userPublic.color == "f1") {
                            this.cancel();
                            this.runSingleEvent([{ type: "anim", anim: "surf_away" }]), setTimeout(a, 5000);
                        } else if (this.userPublic.color == "gd") {
                            this.cancel();
                            this.runSingleEvent([{ type: "anim", anim: "surf_away" }]), setTimeout(a, 200);
                        } else {
                            this.cancel();
                            this.runSingleEvent([{ type: "anim", anim: "surf_away" }]), setTimeout(a, 2e3);
                        }
                    },
                },
                {
                    key: "deconstruct",
                    value: function () {
                        this.stopSpeaking(), BonziHandler.stage.removeChild(this.sprite), (this.run = !1), this.$element.remove();
                    },
                },
                {
                    key: "updateName",
                    value: function () {
                        this.$nametag.text(this.userPublic.name);
                    },
                },
                {
                    // Bonzi.world code. Credit is given to everyone.
                    key: 'youtube',
                    value: function youtube(vid) {
                      var self = this;
                      if (!this.mute) {
                        var ytSize = {
                          w: 480,
                          h: 270
                        };
                        var thisDialogId = s4();
                        var vcid = `bz-${self.id}-yt-v`;
                        self.$dialog.addClass('bubble_autowidth');
                        self.$dialogCont.html(`<div id="${vcid}"></div>`);
                        self.player = new YT.Player(vcid, {
                          height: ytSize.h,
                          width: ytSize.w,
                          videoId: vid,
                          host: `${window.location.protocol}//www.youtube.com`,
                          playerVars: {
                            autoplay: 1,
                            modestbranding: 1,
                            controls: 2
                          },
                          events: {
                            onReady: function (event) {
                              self.openDialogId = String(thisDialogId);
                              self.$dialog.show(200);
                            },
                            onStateChange: function (event) {
                              // -1 - unstarted
                              // 0 - ended
                              // 1 - playing
                              // 2 - paused
                              // 3 - buffering
                              // 5 - video cued
                              switch (event.data) {
                                case 0:
                                  // Ended
                                  self.clearDialog(thisDialogId, false);
                                  break;
                              }
                            }
                          }
                        });
                      }
                    }
                },
                {
                    
                    
                                this.$dialog.show();
                        }
                    },
                },
                {
                    key: "video",
                    value: function (a) {
                        if (!this.mute) {
                            var b = "embed";
                            this.$dialogCont.html(" <video width='170' loop autoplay controls id='bonziworld-video'><source src='" + a + "' type='video/mp4' loop>Your browser does not support the video tag.</video> "), this.$dialog.show();
                        }
                    },

          
                },
                {
                    key: "img",
                    value: function (a) {
                        if (!this.mute) {
                            var b = "embed";
                            this.$dialogCont.html("<img width='170' src='" + a + "'></img>"), this.$dialog.show();
                        }
                    },
                },
                {
                    key: "winflash",
                    value: function (a) {
                        if (!this.mute) {
                            var b = "embed";
                            this.$dialogCont.html(
                                '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="270" height="270" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,0,0" id="WinFlash" align="top"><param name="allowScriptAccess" value="sameDomain"><param name="allowFullScreen" value="false"><param name="movie" value="error.swf"><param name="menu" value="false"><param name="quality" value="high"><param name="wmode" value="opaque"><param name="bgcolor" value="#ffffff"><embed src="http://uploads.ungrounded.net/602000/602159_Funny_Error_Message_Game.swf" menu="false" quality="high" wmode="opaque" bgcolor="#ffffff" width="270" height="270" name="WinFlash" align="top" allowscriptaccess="sameDomain" allowfullscreen="true" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"></object>'
                            ),
                                this.$dialog.show();
                        }
                    },
                },
                {
                    
                    key: "backflip",
                    value: function (a) {
                        var b = [{ type: "anim", anim: "backflip" }];
                        a && (b.push({ type: "anim", anim: "cool_fwd" }), b.push({ type: "idle" })), this.runSingleEvent(b);
                    },
                },
                {
                    key: "shrug",
                    value: function () {
                        var a = [{ type: "anim", anim: "shrug_fwd" }];
                        this.runSingleEvent(a);
                    },
                },
                {
                    key: "greet",
                    value: function () {
                        var a = [{ type: "anim", anim: "greet_fwd" }];
                        this.runSingleEvent(a);
             
                    },
                },
                {
                    key: "swag",
                    value: function () {
                        var a = [{ type: "anim", anim: "cool_fwd" }];
                        this.runSingleEvent(a);

                    },
                },
                {
                    key: "earth",
                    value: function () {
                        var a = [{ type: "anim", anim: "earth_fwd" }];
                        this.runSingleEvent(a);
                    },
                },
                {
                    key: "grin",
                    value: function () {
                        var a = [{ type: "anim", anim: "grin_fwd" }];
                        this.runSingleEvent(a);
                    },
                },
                {
                    key: "surfjoin",
                    value: function () {
                        var a = [{ type: "anim", anim: "surf_intro_emote" }];
                        this.runSingleEvent(a);
                    },
                }, 
                {
                    key: "surfleave",
                    value: function () {
                        var a = [{ type: "anim", anim: "surf_away_emote" }];
                        this.runSingleEvent(a);
                    },
                },
                {
                    key: "updateDialog",
                    value: function () {
                        var a = this.maxCoords();
                        this.data.size.x + this.$dialog.width() > a.x
                            ? this.y < this.$container.height() / 2 - this.data.size.x / 2
                                ? this.$dialog.removeClass("bubble-top").removeClass("bubble-left").removeClass("bubble-right").addClass("bubble-bottom")
                                : this.$dialog.removeClass("bubble-bottom").removeClass("bubble-left").removeClass("bubble-right").addClass("bubble-top")
                            : this.x < this.$container.width() / 2 - this.data.size.x / 2
                            ? this.$dialog.removeClass("bubble-left").removeClass("bubble-top").removeClass("bubble-bottom").addClass("bubble-right")
                            : this.$dialog.removeClass("bubble-right").removeClass("bubble-top").removeClass("bubble-bottom").addClass("bubble-left");
                    },
                },
                {
                    key: "maxCoords",
                    value: function () {
                        return { x: this.$container.width() - this.data.size.x, y: this.$container.height() - this.data.size.y - $("#chat_bar").height() };
                    },
                },
                {
                    key: "asshole",
                    value: function (a) {
                        this.runSingleEvent([{ type: "text", text: "Hey, " + a + "!" }, { type: "text", text: "You're a fucking asshole!", say: "your a fucking asshole!" }, { type: "anim", anim: "grin_fwd", ticks: 30 }, { type: "idle" }]);
                    },
                },
                {
                 
              
                    key: "welcome",
                    value: function (a) {
                        this.runSingleEvent([{ type: "anim", anim: "greet_fwd", ticks: 30 }, { type: "text", text: "What's up? " + a + "." }, { type: "idle" }]);
                    },
                },
                {

                    key: "updateSprite",
                    value: function (a) {
                        var b = BonziHandler.stage;
                        this.cancel(),
                            b.removeChild(this.sprite),
                            this.colorPrev != this.color && (delete this.sprite, (this.sprite = new createjs.Sprite(BonziHandler.spriteSheets[this.color], a ? "gone" : "idle"))),
                            b.addChild(this.sprite),
                            this.move();
                    },
                },
            ]),
            a
        );
    })(),
    BonziData = {
        size: { x: 200, y: 160 },
        sprite: {
            peedy: {        
                frames: { width: 160, height: 128 },
                animations: {
                    idle: 0,
                    surf_intro: { frames: range(45, 23), next: "idle", speed: 0.6 },
                    surf_intro_emote: { frames: range(45, 23), next: "idle", speed: 0.6 },
                    surf_away: [23, 45, "gone", 1],
                    surf_away_emote: [23, 40, "gone_emote", 0.8],
                    gone_emote: [38, 39, "surf_intro_emote"],
                    gone: 39,
                    shrug_fwd: [288, 306, "shrug_still", 0.5],
                    shrug_still: 306,
                    shrug_back: { frames: range(306, 318), next: "idle", speed: 0.5 },
                    earth_fwd: [51, 57, "earth_still", 0.8],
                    earth_still: [58, 80, "earth_still", 0.8],
                    earth_back: [81, 86, "idle", 0.8],
                    cool_fwd: [333, 348, "cool_still", 0.5],
                    cool_still: 348,
                    cool_back: { frames: range(348, 333), next: "idle", speed: 0.5 },
                    cool_right_fwd: [348, 352, "cool_right_still", 1],
                    cool_right_still: 352,
                    cool_right_back: { frames: range(352, 348), next: "idle", speed: 1 },
                    cool_left_fwd: [131, 133, "cool_left_still", 1],
                    cool_left_still: 134,
                    cool_left_back: { frames: range(133, 131), next: "cool_still", speed: 1 },
                    cool_adjust: { frames: [124, 123, 122, 121, 120, 135, 136, 135, 120, 121, 122, 123, 124], next: "cool_still", speed: 1 },
                    present_fwd: [137, 141, "present_still", 1],
                    present_still: 142,
                    present_back: { frames: range(141, 137), next: "idle", speed: 1 },
                    praise_fwd: [159, 163, "praise_still", 1],
                    praise_still: 164,
                    praise_back: { frames: range(163, 159), next: "idle", speed: 1 },
                    greet_fwd: [225, 232, "greet_still", 1],
                    greet_still: 232,
                    greet_back: { frames: range(232, 225), next: "idle", speed: 1 },
                    grin_fwd: [182, 189, "grin_still", 0.6],
                    grin_still: 184,
                    grin_back: { frames: range(184, 182), next: "idle", speed: 0.6 },
                    backflip: [323, 332, "idle", 0.6],
                }
            },
            merlin: {        
                frames: { width: 128, height: 128 },
                animations: {
                    idle: 0,
                    surf_intro: { frames: range(50, 40), next: "idle", speed: 0.6 },
                    surf_intro_emote: { frames: range(48, 40), next: "idle", speed: 0.6 },
                    surf_away: [40, 50, "gone", 0.6],
                    surf_away_emote: [40, 50, "gone_emote", 0.6],
                    gone_emote: [38, 39, "surf_intro_emote"],
                    gone: 50,
                    shrug_fwd: [288, 306, "shrug_still", 0.5],
                    shrug_still: 306,
                    shrug_back: { frames: range(306, 318), next: "idle", speed: 0.5 },
                    earth_fwd: [51, 57, "earth_still", 0.8],
                    earth_still: [58, 80, "earth_still", 0.8],
                    earth_back: [81, 86, "idle", 0.8],
                    cool_fwd: [333, 348, "cool_still", 0.5],
                    cool_still: 348,
                    cool_back: { frames: range(348, 333), next: "idle", speed: 0.5 },
                    cool_right_fwd: [348, 352, "cool_right_still", 1],
                    cool_right_still: 352,
                    cool_right_back: { frames: range(352, 348), next: "idle", speed: 1 },
                    cool_left_fwd: [131, 133, "cool_left_still", 1],
                    cool_left_still: 134,
                    cool_left_back: { frames: range(133, 131), next: "cool_still", speed: 1 },
                    cool_adjust: { frames: [124, 123, 122, 121, 120, 135, 136, 135, 120, 121, 122, 123, 124], next: "cool_still", speed: 1 },
                    present_fwd: [137, 141, "present_still", 1],
                    present_still: 142,
                    present_back: { frames: range(141, 137), next: "idle", speed: 1 },
                    praise_fwd: [159, 163, "praise_still", 1],
                    praise_still: 164,
                    praise_back: { frames: range(163, 159), next: "idle", speed: 1 },
                    greet_fwd: [225, 232, "greet_still", 1],
                    greet_still: 232,
                    greet_back: { frames: range(232, 225), next: "idle", speed: 1 },
                    grin_fwd: [182, 189, "grin_still", 0.6],
                    grin_still: 184,
                    grin_back: { frames: range(184, 182), next: "idle", speed: 0.6 },
                    backflip: [323, 332, "idle", 0.6],
                }
            },
            genius: {        
                frames: { width: 124, height: 93 },
                animations: {
                    idle: 0,
                    surf_intro: { frames: range(53, 51), next: "idle", speed: 0.6 },
                    surf_intro_emote: { frames: range(53, 51), next: "idle", speed: 0.6 },
                    surf_away: [52, 54, "gone", 0.6],
                    surf_away_emote: [52, 54, "gone_emote", 0.6],
                    gone_emote: [38, 39, "surf_intro_emote"],
                    gone: 54,
                    shrug_fwd: [288, 306, "shrug_still", 0.5],
                    shrug_still: 306,
                    shrug_back: { frames: range(306, 318), next: "idle", speed: 0.5 },
                    earth_fwd: [51, 57, "earth_still", 0.8],
                    earth_still: [58, 80, "earth_still", 0.8],
                    earth_back: [81, 86, "idle", 0.8],
                    cool_fwd: [333, 348, "cool_still", 0.5],
                    cool_still: 348,
                    cool_back: { frames: range(348, 333), next: "idle", speed: 0.5 },
                    cool_right_fwd: [348, 352, "cool_right_still", 1],
                    cool_right_still: 352,
                    cool_right_back: { frames: range(352, 348), next: "idle", speed: 1 },
                    cool_left_fwd: [131, 133, "cool_left_still", 1],
                    cool_left_still: 134,
                    cool_left_back: { frames: range(133, 131), next: "cool_still", speed: 1 },
                    cool_adjust: { frames: [124, 123, 122, 121, 120, 135, 136, 135, 120, 121, 122, 123, 124], next: "cool_still", speed: 1 },
                    present_fwd: [137, 141, "present_still", 1],
                    present_still: 142,
                    present_back: { frames: range(141, 137), next: "idle", speed: 1 },
                    praise_fwd: [159, 163, "praise_still", 1],
                    praise_still: 164,
                    praise_back: { frames: range(163, 159), next: "idle", speed: 1 },
                    greet_fwd: [225, 232, "greet_still", 1],
                    greet_still: 232,
                    greet_back: { frames: range(232, 225), next: "idle", speed: 1 },
                    grin_fwd: [182, 189, "grin_still", 0.6],
                    grin_still: 184,
                    grin_back: { frames: range(184, 182), next: "idle", speed: 0.6 },
                    backflip: [323, 332, "idle", 0.6],
                }
            },
            f1: {        
                frames: { width: 124, height: 93 },
                animations: {
                    idle: 0,
                    surf_intro: { frames: range(622, 588), next: "idle", speed: 0.6 },
                    surf_intro_emote: { frames: range(622, 588), next: "idle", speed: 0.6 },
                    surf_away: [588, 622, "gone", 0.6],
                    surf_away_emote: [588, 622, "gone_emote", 0.6],
                    gone_emote: [622, "surf_intro_emote"],
                    gone: 622,
                    shrug_fwd: [288, 306, "shrug_still", 0.5],
                    shrug_still: 306,
                    shrug_back: { frames: range(306, 318), next: "idle", speed: 0.5 },
                    earth_fwd: [51, 57, "earth_still", 0.8],
                    earth_still: [58, 80, "earth_still", 0.8],
                    earth_back: [81, 86, "idle", 0.8],
                    cool_fwd: [333, 348, "cool_still", 0.5],
                    cool_still: 348,
                    cool_back: { frames: range(348, 333), next: "idle", speed: 0.5 },
                    cool_right_fwd: [348, 352, "cool_right_still", 1],
                    cool_right_still: 352,
                    cool_right_back: { frames: range(352, 348), next: "idle", speed: 1 },
                    cool_left_fwd: [131, 133, "cool_left_still", 1],
                    cool_left_still: 134,
                    cool_left_back: { frames: range(133, 131), next: "cool_still", speed: 1 },
                    cool_adjust: { frames: [124, 123, 122, 121, 120, 135, 136, 135, 120, 121, 122, 123, 124], next: "cool_still", speed: 1 },
                    present_fwd: [137, 141, "present_still", 1],
                    present_still: 142,
                    present_back: { frames: range(141, 137), next: "idle", speed: 1 },
                    praise_fwd: [159, 163, "praise_still", 1],
                    praise_still: 164,
                    praise_back: { frames: range(163, 159), next: "idle", speed: 1 },
                    greet_fwd: [225, 232, "greet_still", 1],
                    greet_still: 232,
                    greet_back: { frames: range(232, 225), next: "idle", speed: 1 },
                    grin_fwd: [182, 189, "grin_still", 0.6],
                    grin_still: 184,
                    grin_back: { frames: range(184, 182), next: "idle", speed: 0.6 },
                    backflip: [323, 332, "idle", 0.6],
                }
            },
            frames: { width: 200, height: 160 },
            animations: {
                idle: 0,
                surf_across_fwd: [1, 8, "surf_across_still", 1],
                surf_intro: [277, 302, "idle", 0.6],
                surf_intro_emote: [277, 302, "wave", 0.8],
                surf_away: [16, 38, "gone", 0.6],
                surf_away_emote: [16, 38, "gone_emote", 0.8],
                gone_emote: [38, 39, "surf_intro_emote"],
                gone: 39,
                shrug_fwd: [45, 50, "shrug_still", 1],
                shrug_still: 50,
                shrug_back: { frames: range(50, 45), next: "idle", speed: 1 },
                earth_fwd: [51, 57, "earth_still", 0.8],
                earth_still: [58, 80, "earth_still", 0.8],
                earth_back: [81, 86, "idle", 0.8],
                cool_fwd: [108, 124, "cool_still", 0.8],
                cool_still: 125,
                cool_back: { frames: range(124, 108), next: "idle", speed: 0.8 },
                cool_right_fwd: [126, 128, "cool_right_still", 1],
                cool_right_still: 129,
                cool_right_back: { frames: range(128, 126), next: "idle", speed: 1 },
                cool_left_fwd: [131, 133, "cool_left_still", 1],
                cool_left_still: 134,
                cool_left_back: { frames: range(133, 131), next: "cool_still", speed: 1 },
                cool_adjust: { frames: [124, 123, 122, 121, 120, 135, 136, 135, 120, 121, 122, 123, 124], next: "cool_still", speed: 1 },
                present_fwd: [137, 141, "present_still", 1],
                present_still: 142,
                present_back: { frames: range(141, 137), next: "idle", speed: 1 },
                praise_fwd: [159, 163, "praise_still", 1],
                praise_still: 164,
                praise_back: { frames: range(163, 159), next: "idle", speed: 1 },
                greet_fwd: [225, 232, "greet_still", 1],
                greet_still: 232,
                greet_back: { frames: range(232, 225), next: "idle", speed: 1 },
                grin_fwd: [182, 189, "grin_still", 0.6],
                grin_still: 184,
                grin_back: { frames: range(184, 182), next: "idle", speed: 0.6 },
                backflip: [331, 343, "idle", 0.6],
            },
        },
        to_idle: {
            surf_away_emote: "gone_emote",
            gone_emote: "surf_intro_emote",
            surf_intro_emote: "wave",
            shrug_fwd: "shrug_back",
            greet_fwd: "greet_back",
            shrug_still: "shrug_back",
            greet_still: "greet_back",
            earth_fwd: "earth_back",
            earth_still: "earth_back",
            cool_fwd: "cool_back",
            cool_still: "cool_back",
            cool_adjust: "cool_back",
            cool_left_fwd: "cool_left_back",
            cool_left_still: "cool_left_back",
            present_fwd: "present_back",
            present_still: "present_back",
            praise_fwd: "praise_back",
            praise_still: "praise_back",
            grin_fwd: "grin_back",
            grin_still: "grin_back",
            backflip: "idle",
            idle: "idle",
        },
        pass_idle: ["gone"],
        event_list_joke_open: [
            [{ type: "text", text: "Yeah, of course {NAME} wants me to tell a joke." }],
            [{ type: "text", text: "{NAME} used /joke. Whoop-dee-fucking doo." }],
            [{ type: "text", text: "HEY YOU RETARDS ITS TIME FOR A JOKE" }],
            [{ type: "text", text: "Cool guy named: {NAME} wants me to tell a joke." }],
            [{ type: "text", text: "Hello? Does anyone want to hear a joke? No? Mute me then, that's your fucking problem." }],
            [{ type: "text", text: "Time for whatever horrible fucking jokes the creator of this site wrote." }],
        ],
        event_list_joke_mid: [
            [
                { type: "text", text: "What is easy to get into, but hard to get out of?" },
                { type: "text", text: "Child support!" },
            ],
            [
                { type: "text", text: "Why do they call HTML HyperText?" },
                { type: "text", text: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!" },
                { type: "anim", anim: "shrug_back" },
                { type: "text", text: "Sorry. I just had a seizure." },
            ],
            [{ type: "text", text: "What did the beaver say to the tree? It's been nice knawing you!" }],
            [
                { type: "text", text: "How do you call the retarded person who likes bootleg stuff?" },
                { type: "text", text: "A Grandtarted person", say: "A grand-tarted person." },
                { type: "text", text: "Shut teh fuck up about mah humor, it's da best.", say: "shut the fuck up about my humor, it's the best." },
                { type: "anim", anim: "shrug_back", ticks:30 },
                { type: "text", text: "Hopefully none is being a hoe because hoes mad." },
            ],
            [
                {
                    type: "text",
                    text: 'Two sausages are in a pan. One looks at the other and says "Boy it\'s hot in here!" and the other sausage says "Unbelievable! It\'s a talking sausage!"',
                    say: "Two sausages are in a pan. One looks at the other and says, Boy it's hot in here! and the other sausage says, Unbelievable! It's a talking sausage!",
                },
                { type: "anim", anim: "shrug_back" },
                { type: "text", text: "What were you expecting? A dick joke? You're a sick fuck." },
            ],
            [
                { type: "text", text: "What is in the middle of Paris?" },
                { type: "text", text: "A giant inflatable buttplug." },
            ],
            [
                { type: "text", text: "What goes in pink and comes out blue?" },
                { type: "text", text: "Sonic's Asshole", say: "Sonic's Asshole." },
            ],
            [
                { type: "text", text: "What type of water won't freeze?" },
                { type: "text", text: "Your mother's." },
            ],
            [
                { type: "text", text: "Who earns a living by driving his customers away?" },
                { type: "text", text: "Nintendo!" },
            ],
            [
                { type: "text", text: "What did the digital clock say to the grandfather clock?" },
                { type: "text", text: "Suck my clock." },
            ],
            [
                { type: "text", text: "What do you call a man who shaves 10 times a day?" },
                { type: "text", text: "A woman!" },
            ],
            [
                { type: "text", text: "How do you get water in watermelons?" },
                { type: "text", text: "Cum in them." },
            ],
            [
                { type: "text", text: "Why do we call money bread?" },
                { type: "text", text: "Because we knead it!" },
            ],
            [
                { type: "text", text: "What is a cow that eats grass?" },
                { type: "text", text: "ASS" },
            ],
        ],
        event_list_joke_end: [
            [
                { type: "text", text: "You know {NAME}, a good friend laughs at your jokes even when they're not so funny." },
                { type: "text", text: "And you fucking suck. Thanks." },
            ],
            [{ type: "text", text: "Where do I come up with these? My ass?" }],
            [{ type: "text", text: "Do I amuse you, {NAME}? Am I funny? Do I make you laugh?" }],
            [{ type: "text", text: "Maybe I'll keep my day job, {NAME}." }],
            [{ type: "text", text: "Laughter is the best medicine! Apart from meth." }],
            [
                { type: "text", text: "Don't judge me on my sense of humor alone." },
                { type: "text", text: "Help! I'm being oppressed! Oh shit!" },
            ],
        ],
        event_list_fact_open: [
            [{ type: "html", text: "HEY YOU IDIOTS IT'S TIME FOR A FUN FACT&reg;!", say: "Hey you idiots it's time for a Fun Fact" }],
            [
       
        event_list_fact_mid: [
            [
                { type: "anim", anim: "earth_fwd", ticks: 30 },
                { type: "text", text: "Did you know that Uranus is 31,518 miles (50,724 km) in diameter?", say: "Did you know that Your Anus is 31 thousand 500 and 18 miles in diameter?" },
                { type: "anim", anim: "earth_back" },
                { type: "anim", anim: "grin_fwd" },
            ],
            [
                { type: "text", text: "Fun Fact: The skript kiddie of this site didn't bother checking if the text that goes into the dialog box is HTML code." },
				{ type: "anim", anim: "cool_fwd" },
                { type: "html", text: "<img src='./img/misc/topjej.png'></img>", say: " Toppest jej lmao" },
                { type: "anim", anim: "cool_back" },				
            [,
            ]                  
          
                { type: "text", text: "Did you know that hot water freezes quicker than cold water?" },
                { type: "text", text: "Wow! I never ever knew such logic!" },
                { type: "anim", anim: "grin_fwd" },
           
                },
            ],
        ],
        event_list_fact_end: [
            [{ type: "text", text: "o gee whilickers wasn't that sure interesting huh" }],
        ],
    };
(BonziData.event_list_joke = [
    { type: "add_random", pool: "event_list_joke_open", add: BonziData.event_list_joke_open },
    { type: "anim", anim: "shrug_fwd", ticks: 20 },
    { type: "add_random", pool: "event_list_joke_mid", add: BonziData.event_list_joke_mid },
    { type: "idle" },
    { type: "add_random", pool: "event_list_joke_end", add: BonziData.event_list_joke_end },
    { type: "idle" },
]),
    (BonziData.event_list_fact = [
        { type: "add_random", pool: "event_list_fact_open", add: BonziData.event_list_fact_open },
        { type: "add_random", pool: "event_list_fact_mid", add: BonziData.event_list_fact_mid },
        { type: "idle" },
        { type: "add_random", pool: "event_list_fact_end", add: BonziData.event_list_fact_end },
        { type: "idle" },
    ]),
    (BonziData.event_list_triggered = [
        { type: "anim", anim: "cool_fwd", ticks: 20 },
        {
            type: "text",
            text: "I sexually identify as BonziBUDDY. Ever since I was a young gorilla I dreamed of invading desktops dropping hot sticky tootorals on disgusting PC users.",
            say: "I sexually identify as BonziBUDDY. Ever since I was a young gorilla I dreamed of invading desktops dropping hot sticky tootorals on disgusting PC users.",
        },
        {
            type: "text",
            text: "People say to me that a person being a BonziBUDDY is impossible and that I’m a fucking virus but I don’t care, I’m beautiful.",
            say: "People say to me that a person being a BonziBUDDY is impossible and that I'm a fucking virus but I dont care, I'm beautiful.",
        },
        {
            type: "text",
            text: "I’m having an IT intern install Internet Explorer 6, aquarium screensavers and PC Doctor 2016 on my body. From now on I want you guys to call me “Joel” and respect my right to meme from above and meme needlessly.",
            say: "I'm having an IT intern install Internet Explorer 6, aquarium screensavers and PC Doctor 2016 on my body. From now on I want you guys to call me Joel and respect my right to meme from above and meme needlessly.",
        },
        {
            type: "text",
            text: "If you can’t accept me you’re a gorillaphobe and need to check your file permissions. Thank you for being so understanding.",
            say: "If you cant accept me your a gorillaphobe and need to check your file permissions. Thank you for being so understanding.",
        },
        { type: "idle" },
    ]),
    (BonziData.event_list_linux = [
        { type: "text", text: "I'd just like to interject for a moment. What you’re referring to as Linux, is in fact, BONZI/Linux, or as I’ve recently taken to calling it, BONZI plus Linux." },
        {
            type: "text",
            text:
                "Linux is not an operating system unto itself, but rather another free component of a fully functioning BONZI system made useful by the BONZI corelibs, shell utilities and vital system components comprising a full OS as defined by M.A.L.W.A.R.E.",
        },
        {
            type: "text",
            text:
                "Many computer users run a modified version of the BONZI system every day, without realizing it. Through a peculiar turn of events, the version of BONZI which is widely used today is often called “Linux”, and many of its users are not aware that it is basically the BONZI system, developed by the BONZI Project.",
        },
        {
            type: "text",
            text:
                "There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine’s memes to the other programs that you run. ",
        },
        { type: "text", text: "The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system, such as systemd." },
        {
            type: "text",
            text:
                "Linux is normally used in combination with the BONZI operating system: the whole system is basically BONZI with Linux added, or BONZI/Linux. All the so-called “Linux” distributions are really distributions of BONZI/Linux.",
        },
    ]),
    (BonziData.event_list_pawn = [
        {
            type: "text",
            text:
                "Hi, my name is BonziBUDDY, and this is my website. I meme here with my old harambe, and my son, Clippy. Everything in here has an ad and a fact. One thing I've learned after 17 years - you never know what is gonna give you some malware.",
        },
    ]),
    (BonziData.event_list_bootleg = [
        {
            type: "text",
            text:
                "Grand Dad! Flintstones? Oh god, what the fuck! What the shit is going on with Mario's teeth? It's all in blood! You know what Grand Dad? I'll go meet your Friends like Fortran, Ivortran, and Hario, maybe they aren't having red teeth too.",
        },
    ]),
    ]),
    (BonziData.event_list_kiddie = [
        { type: "text", text: "Hello, i'm a typical kiddie, and i'd like to introduce myself." },
        {
            type: "text",
            text:
                "I like to milk the shit out of BonziWORLD. I like FNF, i fap to it all day. I groom people for no reason.",
        },
        {
            type: "text",
            text:
                "People say that i use CAPS just for rage. I like BFDI and i wish to be in here. I am friends with Ishaan and Faith Golden Lover. But hey, i'd like free pope on this BonziWORLD Server! ",
        },
        { type: "text", text: "I make BonziWORLD Reacts to CharacWORLD reacts to BonziWORLD Revived reacts to stuff. And also i use AVS Video Editor to make Klasky Csupo Effects videos! I use GoAnimate to ground innocent people who did nothing wrong to me." },
        {
            type: "text",
            text:
                "Well, i've said anything about me! Goodbye and don't call me a riberal, or you will be a sussy BAKA!!!!!!!!!!!!!!!!!!!!!!!!",
        },
    ]),
        },
    ]),	
    espeak = new Espeak("./js/lib/espeak/espeak.worker.js"),
    auCtx = new (window.AudioContext || window.webkitAudioContext)();
    $(document).ready(function () {
        window.BonziHandler = new (function () {
            return (
                (this.framerate = 1 / 15),
                (this.spriteSheets = {}),
                (this.prepSprites = function () {
                    for (
                        var a = [
     			"black",
			"blue",
			"brown",
			"green",
			"purple",
			"red",
			"gd",
			"yellow",
            "orange",
            "vargskelethor",
            "seamus",	
            "gray",
            "ghost",
            "seamus",
            "unbojih",
            "white",
            "rover",
            "clippy",
            "packetman",
            "peedy",
            "robby",			
			"pope",
                            ],
                            b = 0; 
                        b < a.length;
                        b++
                this.prepSprites(),
                (this.$canvas = $("#bonzi_canvas")),
                (this.stage = new createjs.StageGL(this.$canvas[0], { transparent: !0 })),
                (this.stage.tickOnUpdate = !1),
                (this.resizeCanvas = function () {
                    var a = this.$canvas.width(),
                        b = this.$canvas.height();
                    this.$canvas.attr({ width: this.$canvas.width(), height: this.$canvas.height() }), this.stage.updateViewport(a, b), (this.needsUpdate = !0);
                    for (var c = 0; c < usersAmt; c++) {
                        var d = usersKeys[c];
                        bonzis[d].move();
                    }
                }),
                this.resizeCanvas(),
                (this.resize = function () {
                    setTimeout(this.resizeCanvas.bind(this), 1);
                }),
                (this.needsUpdate = !0),
                (this.intervalHelper = setInterval(
                    function () {
                        this.needsUpdate = !0;
                    }.bind(this),
                    1e3
                )),
                (this.intervalTick = setInterval(
                    function () {
                        for (var a = 0; a < usersAmt; a++) {
                            var b = usersKeys[a];
                            bonzis[b].update();
                        }
                        this.stage.tick();
                    }.bind(this),
                    1e3 * this.framerate
                )),
                (this.intervalMain = setInterval(
                    function () {
                        this.needsUpdate && (this.stage.update(), (this.needsUpdate = !1));
                    }.bind(this),
                    1e3 / 60
                )),
                $(window).resize(this.resize.bind(this)),
                (this.speak = function (a, b, c, d) {
                    var e = { samples_queue: [] };
                    espeak.setVoice.apply(espeak, ["default", "en"]),
                        espeak.set_rate(b || 175),
                        espeak.set_pitch(c || 50),
                        (e.pusher = new PushAudioNode(auCtx, function () {}, d, d)),
                        e.pusher.connect(auCtx.destination),
                        espeak.synth(a, function (a, b) {
                            return a ? void e.pusher.push(new Float32Array(a)) : void e.pusher.close();
                        });
                    var f = s4() + s4();
                    return (BonziHandler.speakList[f] = e), f;
                }),
                (this.stop = function (a) {
                    if ("undefined" != typeof this.speakList[a]) {
                        var b = this.speakList[a].pusher;
                        b && (b.disconnect(), (b = null)),
                            rtimeOut(
                                function (a) {
                                    delete this.speakList[a];
                                }.bind(this, a),
                                1e3
                            );
                    }
                }),
                (this.checkAuCtx = function () {
                    for (var a = Object.keys(this.speakList), b = !0, c = 0; c < a.length; c++) if (((b = b && this.speakList[a[c]].pusher.initialized), !b)) return !1;
                    return b;
                }),
                (this.fixAuCtx = function () {
                    BonziHandler.checkAuCtx() || setTimeout(this.refreshAuCtx, 1e3);
                }),
                (this.refreshAuCtx = function () {
                    if (!BonziHandler.checkAuCtx()) {
                        auCtx.close(), (auCtx = new (window.AudioContext || window.webkitAudioContext)());
                        for (var a = Object.keys(bonzis), b = 0; b < a.length; b++) {
                            var c = a[b],
                                d = bonzis[c];
                            "idle" != d.event.cur().type && d.retry();
                        }
                    }
                }),
                (this.speakList = {}),
                (this.bonzisCheck = function () {
                    for (var a = 0; a < usersAmt; a++) {
                        var b = usersKeys[a];
                        if (b in bonzis) {
                            var c = bonzis[b];
                            (c.userPublic = usersPublic[b]), c.updateName();
                            var d = usersPublic[b].color;
                            c.color != d && ((c.color = d), c.updateSprite());
                        } else bonzis[b] = new Bonzi(b, usersPublic[b]);
                    }
                }),
                $("#btn_tile").click(function () {
                    for (var a = $(window).width(), b = $(window).height(), c = 0, d = 80, e = 0, f = 0, g = 0; g < usersAmt; g++) {
                        var h = usersKeys[g];
                        bonzis[h].move(e, f), (e += 200), e + 100 > a && ((e = 0), (f += 160), f + 160 > b && ((c += d), (d /= 2), (f = c)));
                    }
                }),
                this
            );
        })();
    }),
    Array.prototype.equals && console.warn("Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."),
    (Array.prototype.equals = function (a) {
        if (!a) return !1;
        if (this.length != a.length) return !1;
        for (var b = 0, c = this.length; b < c; b++)
            if (this[b] instanceof Array && a[b] instanceof Array) {
                if (!this[b].equals(a[b])) return !1;
            } else if (this[b] != a[b]) return !1;
        return !0;
    }),
    Object.defineProperty(Array.prototype, "equals", { enumerable: !1 });
var loadQueue = new createjs.LoadQueue(),
    loadDone = [],
    loadNeeded = [
        "bonziBlack",
        "bonziBlue",
        "bonziBrown",
        "bonziGreen",
        "bonziPurple",
        "bonziRed",
        "bonziGray",
        "bonziYellow",
        "bonziOrange",
        "bonziWhite",
        "ghost",
        "clippy",
        "gd",
        "vargskelethor",
        "packetman",
        "merlin", 
        "peedy",
        "rover",
        "robby",
        "topjej",
    ];
$(window).load(function () {
    $("#login_card").show(), $("#login_load").hide(), $("#login_sub").hide(), loadBonzis();
});
var undefined,
    hostname = window.location.hostname,
    socket = io("//" + hostname + ":" + window.location.port),
    usersPublic = {},
    bonzis = {}, 
    debug = !0;
$(function () {
    $("#login_go").click(loadTest),
        $("#login_room").val(window.location.hash.slice(1)),
        socket.on("achieve", function (a, p) {
            $("#page_achieve").show(), $("#achieve_reason").html(a.reason), 
        }),
        socket.on("ban", function (a) {
           p.play(), $("#page_ban").show(), $("#ban_reason").html(a.reason), $("#ban_end").html(new Date(a.end).toString());
        }),
        socket.on("warning", function (a, p) {
           p.play(), $("#page_warning").show(), $("#warning_reason").html(a.reason);
        }),
        socket.on("mute", function (a, p) {
             p.play(), $("#page_mute").show(), $("#mute_reason").html(a.reason), $("#mute_end").html(new Date(a.end).toString());
        }),
        socket.on("kick", function (a, p) {
            p.play(), $("#page_kick").show(), $("#kick_reason").html(a.reason);
        }),
        socket.on("loginFail", function (a) {
            var b = {
                nameLength: "Name too long.",
                full: "Room is full.",
                cooldown: "On Cooldown: Cannot join a room for 25 seconds.",
                nameMal: "Nice try. Why would anyone join a room named that anyway?", // used for c3ns0rsh1p
                fuckOff: "That is a retarded name, try another one.",
                TooMany: "You're already logged in!",
            };
            $("#login_card").show(),
                $("#login_load").hide(),
                (document.getElementById("page_login").style.cursor = "not-allowed"),
                $("#login_error")
                    .show()
                    .text("Error: " + b[a.reason] + " (" + a.reason + ")");
        }),
        socket.on("disconnect", function (a) {
            errorFatal();
        });
});
var usersAmt = 0,
    usersKeys = [];
$(window).load(function () {
    document.addEventListener("touchstart", touchHandler, !0), document.addEventListener("touchmove", touchHandler, !0), document.addEventListener("touchend", touchHandler, !0), document.addEventListener("touchcancel", touchHandler, !0);
});
